import tensorflow as tf
slim = tf.contrib.slim

def euclidean_norm(tensor, reduction_indicies = None, name = None):
    with tf.op_scope(tensor + reduction_indicies, name, "euclidean_norm"): #need to have this for tf to work
        squareroot_tensor = tf.square(tensor)
        euclidean_norm = tf.sum(squareroot_tensor, reduction_indicies =  reduction_indicies)
        return euclidean_norm

def frobenius_norm(tensor, reduction_indicies = None, name = None):
    #with tf.op_scope(tensor + reduction_indicies, name, "frobenius_norm"): #need to have this for tf to work
        squareroot_tensor = tf.square(tensor)
        tensor_sum = tf.reduce_sum(squareroot_tensor, axis=reduction_indicies, keep_dims=True)
        frobenius_norm = tf.sqrt(tensor_sum)
        return frobenius_norm

def cov_pooling_operation(cnn, batch_size):
    shape_1 = cnn.get_shape().as_list()
    reshape_1 = tf.reshape(cnn, [-1, shape_1[1] * shape_1[2], shape_1[3]])
    reshape_1 = tf.nn.l2_normalize(reshape_1,dim=[1,2])
    # spd = _cal_cov_pooling(reshape_1,batch_size)
    spd = _cal_gaussian_pooling(reshape_1, batch_size)
    return spd


def _cal_cov_pooling(features, batch_size):
    shape_f = features.get_shape().as_list()
    centers_batch = tf.reduce_mean(tf.transpose(features, [0, 2, 1]),2)
    centers_batch = tf.reshape(centers_batch, [-1, 1, shape_f[2]])
    centers_batch = tf.tile(centers_batch, [1, shape_f[1], 1])
    tmp = tf.subtract(features, centers_batch)
    tmp_t = tf.transpose(tmp, [0, 2, 1])
    features_t = 1/tf.cast((shape_f[1]-1),tf.float32)*tf.matmul(tmp_t, tmp)
    trace_t = tf.trace(features_t)
    trace_t = tf.reshape(trace_t, [-1, 1])
    trace_t = tf.tile(trace_t, [1, shape_f[2]])
    trace_t = 0.001*tf.matrix_diag(trace_t)
    return tf.add(features_t,trace_t)



def _cal_gaussian_pooling(features, batch_size):
    shape_f = features.get_shape().as_list()
    centers_batch = tf.reduce_mean(tf.transpose(features, [0, 2, 1]),2)
    centers_batch = tf.reshape(centers_batch, [batch_size, 1, shape_f[2]])
    centers_batch_tile = tf.tile(centers_batch, [1, shape_f[1], 1])
    tmp = tf.subtract(features, centers_batch_tile)
    tmp_t = tf.transpose(tmp, [0, 2, 1])
    cov = 1/tf.cast((shape_f[1]-1),tf.float32)*tf.matmul(tmp_t, tmp)
    cov = tf.add(cov, tf.matmul(tf.transpose(centers_batch,[0,2,1]), centers_batch))
    col_right = tf.reshape(centers_batch, [batch_size, shape_f[2], 1])
    new_mat = tf.concat([cov,col_right],2)
    row_bottom = tf.concat([centers_batch,tf.ones([batch_size,1,1])],2)
    features_t = tf.concat([new_mat,row_bottom],1)
    shape_f = features_t.get_shape().as_list()
    trace_t = tf.trace(features_t)
    trace_t = tf.reshape(trace_t, [batch_size, 1])
    trace_t = tf.tile(trace_t, [1, shape_f[2]])
    trace_t = 0.001*tf.matrix_diag(trace_t)
    return tf.add(features_t,trace_t)


